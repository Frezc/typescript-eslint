// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`class declaration emit-metadata 1`] = `
ScopeManager {
  variables: Array [
    ImplicitGlobalConstTypeVariable,
    Variable$2 {
      defs: Array [
        FunctionNameDefinition$1 {
          name: Identifier<"deco">,
          node: FunctionDeclaration$1,
        },
      ],
      name: "deco",
      references: Array [
        Reference$1 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
        Reference$3 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
        Reference$6 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
        Reference$9 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
        Reference$12 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
        Reference$14 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
        Reference$17 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
        Reference$18 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
        Reference$21 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
        Reference$25 {
          identifier: Identifier<"deco">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$2,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$3 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$4 {
      defs: Array [
        ParameterDefinition$2 {
          name: Identifier<"param">,
          node: FunctionDeclaration$1,
        },
      ],
      name: "param",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$5 {
      defs: Array [
        ClassNameDefinition$3 {
          name: Identifier<"A">,
          node: ClassDeclaration$2,
        },
      ],
      name: "A",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$6 {
      defs: Array [
        ClassNameDefinition$4 {
          name: Identifier<"A">,
          node: ClassDeclaration$2,
        },
      ],
      name: "A",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$7 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$8 {
      defs: Array [
        ParameterDefinition$5 {
          name: Identifier<"a">,
          node: FunctionExpression$3,
        },
      ],
      name: "a",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$9 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$10 {
      defs: Array [
        ParameterDefinition$6 {
          name: Identifier<"foo">,
          node: FunctionExpression$4,
        },
      ],
      name: "foo",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$11 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$12 {
      defs: Array [
        ParameterDefinition$7 {
          name: Identifier<"a">,
          node: FunctionExpression$5,
        },
      ],
      name: "a",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$13 {
      defs: Array [
        ParameterDefinition$8 {
          name: Identifier<"b">,
          node: FunctionExpression$5,
        },
      ],
      name: "b",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$14 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$15 {
      defs: Array [
        ParameterDefinition$9 {
          name: Identifier<"a">,
          node: FunctionExpression$6,
        },
      ],
      name: "a",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$16 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$17 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$18 {
      defs: Array [
        ParameterDefinition$10 {
          name: Identifier<"a">,
          node: FunctionExpression$7,
        },
      ],
      name: "a",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$19 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$20 {
      defs: Array [
        ParameterDefinition$11 {
          name: Identifier<"a">,
          node: FunctionExpression$8,
        },
      ],
      name: "a",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$21 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$22 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$23 {
      defs: Array [
        VariableDefinition$12 {
          name: Identifier<"keyName">,
          node: VariableDeclarator$9,
        },
      ],
      name: "keyName",
      references: Array [
        Reference$19 {
          identifier: Identifier<"keyName">,
          init: true,
          isRead: false,
          isTypeReference: false,
          isValueReference: true,
          isWrite: true,
          resolved: Variable$23,
          writeExpr: Literal$10,
        },
        Reference$22 {
          identifier: Identifier<"keyName">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$23,
        },
        Reference$24 {
          identifier: Identifier<"keyName">,
          isRead: true,
          isTypeReference: false,
          isValueReference: true,
          isWrite: false,
          resolved: Variable$23,
        },
      ],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$24 {
      defs: Array [
        ClassNameDefinition$13 {
          name: Identifier<"B">,
          node: ClassDeclaration$11,
        },
      ],
      name: "B",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$25 {
      defs: Array [
        ClassNameDefinition$14 {
          name: Identifier<"B">,
          node: ClassDeclaration$11,
        },
      ],
      name: "B",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$26 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$27 {
      defs: Array [
        ParameterDefinition$15 {
          name: Identifier<"foo">,
          node: FunctionExpression$12,
        },
      ],
      name: "foo",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$28 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
    Variable$29 {
      defs: Array [
        ParameterDefinition$16 {
          name: Identifier<"a">,
          node: FunctionExpression$13,
        },
      ],
      name: "a",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: false,
    },
    Variable$30 {
      defs: Array [],
      name: "arguments",
      references: Array [],
      isValueVariable: true,
      isTypeVariable: true,
    },
  ],
  scopes: Array [
    GlobalScope$1 {
      block: Program$14,
      isStrict: false,
      references: Array [
        Reference$1,
        Reference$19,
      ],
      set: Map {
        "const" => ImplicitGlobalConstTypeVariable,
        "deco" => Variable$2,
        "A" => Variable$5,
        "keyName" => Variable$23,
        "B" => Variable$24,
      },
      type: "global",
      upper: null,
      variables: Array [
        ImplicitGlobalConstTypeVariable,
        Variable$2,
        Variable$5,
        Variable$23,
        Variable$24,
      ],
    },
    FunctionScope$2 {
      block: FunctionDeclaration$1,
      isStrict: false,
      references: Array [],
      set: Map {
        "arguments" => Variable$3,
        "param" => Variable$4,
      },
      type: "function",
      upper: GlobalScope$1,
      variables: Array [
        Variable$3,
        Variable$4,
      ],
    },
    ClassScope$3 {
      block: ClassDeclaration$2,
      isStrict: true,
      references: Array [
        Reference$2 {
          identifier: Identifier<"Type1">,
          isRead: true,
          isTypeReference: true,
          isValueReference: false,
          isWrite: false,
          resolved: null,
        },
        Reference$3,
        Reference$4 {
          identifier: Identifier<"a">,
          isRead: true,
          isTypeReference: true,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
        Reference$12,
        Reference$14,
        Reference$17,
        Reference$18,
      ],
      set: Map {
        "A" => Variable$6,
      },
      type: "class",
      upper: GlobalScope$1,
      variables: Array [
        Variable$6,
      ],
    },
    FunctionScope$4 {
      block: FunctionExpression$3,
      isStrict: true,
      references: Array [
        Reference$5 {
          identifier: Identifier<"SetterType">,
          isRead: true,
          isTypeReference: true,
          isValueReference: false,
          isWrite: false,
          resolved: null,
        },
        Reference$6,
      ],
      set: Map {
        "arguments" => Variable$7,
        "a" => Variable$8,
      },
      type: "function",
      upper: ClassScope$3,
      variables: Array [
        Variable$7,
        Variable$8,
      ],
    },
    FunctionScope$5 {
      block: FunctionExpression$4,
      isStrict: true,
      references: Array [
        Reference$7 {
          identifier: Identifier<"b">,
          isRead: true,
          isTypeReference: true,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
      ],
      set: Map {
        "arguments" => Variable$9,
        "foo" => Variable$10,
      },
      type: "function",
      upper: ClassScope$3,
      variables: Array [
        Variable$9,
        Variable$10,
      ],
    },
    FunctionScope$6 {
      block: FunctionExpression$5,
      isStrict: true,
      references: Array [
        Reference$8 {
          identifier: Identifier<"Type2">,
          isRead: true,
          isTypeReference: true,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
        Reference$9,
        Reference$10 {
          identifier: Identifier<"Type0">,
          isRead: true,
          isTypeReference: true,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
      ],
      set: Map {
        "arguments" => Variable$11,
        "a" => Variable$12,
        "b" => Variable$13,
      },
      type: "function",
      upper: ClassScope$3,
      variables: Array [
        Variable$11,
        Variable$12,
        Variable$13,
      ],
    },
    FunctionScope$7 {
      block: FunctionExpression$6,
      isStrict: true,
      references: Array [
        Reference$11 {
          identifier: Identifier<"Type3">,
          isRead: true,
          isTypeReference: true,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
      ],
      set: Map {
        "arguments" => Variable$14,
        "a" => Variable$15,
      },
      type: "function",
      upper: ClassScope$3,
      variables: Array [
        Variable$14,
        Variable$15,
      ],
    },
    FunctionScope$8 {
      block: FunctionExpression$15,
      isStrict: true,
      references: Array [
        Reference$13 {
          identifier: Identifier<"Type4">,
          isRead: true,
          isTypeReference: true,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
      ],
      set: Map {
        "arguments" => Variable$16,
      },
      type: "function",
      upper: ClassScope$3,
      variables: Array [
        Variable$16,
      ],
    },
    FunctionScope$9 {
      block: FunctionExpression$7,
      isStrict: true,
      references: Array [
        Reference$15 {
          identifier: Identifier<"Type5">,
          isRead: true,
          isTypeReference: true,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
      ],
      set: Map {
        "arguments" => Variable$17,
        "a" => Variable$18,
      },
      type: "function",
      upper: ClassScope$3,
      variables: Array [
        Variable$17,
        Variable$18,
      ],
    },
    FunctionScope$10 {
      block: FunctionExpression$8,
      isStrict: true,
      references: Array [
        Reference$16 {
          identifier: Identifier<"Type6">,
          isRead: true,
          isTypeReference: true,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
      ],
      set: Map {
        "arguments" => Variable$19,
        "a" => Variable$20,
      },
      type: "function",
      upper: ClassScope$3,
      variables: Array [
        Variable$19,
        Variable$20,
      ],
    },
    FunctionScope$11 {
      block: FunctionExpression$16,
      isStrict: true,
      references: Array [],
      set: Map {
        "arguments" => Variable$21,
      },
      type: "function",
      upper: ClassScope$3,
      variables: Array [
        Variable$21,
      ],
    },
    FunctionScope$12 {
      block: FunctionExpression$17,
      isStrict: true,
      references: Array [],
      set: Map {
        "arguments" => Variable$22,
      },
      type: "function",
      upper: ClassScope$3,
      variables: Array [
        Variable$22,
      ],
    },
    ClassScope$13 {
      block: ClassDeclaration$11,
      isStrict: true,
      references: Array [
        Reference$22,
        Reference$24,
        Reference$25,
      ],
      set: Map {
        "B" => Variable$25,
      },
      type: "class",
      upper: GlobalScope$1,
      variables: Array [
        Variable$25,
      ],
    },
    FunctionScope$14 {
      block: FunctionExpression$12,
      isStrict: true,
      references: Array [
        Reference$20 {
          identifier: Identifier<"c">,
          isRead: true,
          isTypeReference: true,
          isValueReference: true,
          isWrite: false,
          resolved: null,
        },
        Reference$21,
      ],
      set: Map {
        "arguments" => Variable$26,
        "foo" => Variable$27,
      },
      type: "function",
      upper: ClassScope$13,
      variables: Array [
        Variable$26,
        Variable$27,
      ],
    },
    FunctionScope$15 {
      block: FunctionExpression$13,
      isStrict: true,
      references: Array [
        Reference$23 {
          identifier: Identifier<"Type">,
          isRead: true,
          isTypeReference: true,
          isValueReference: false,
          isWrite: false,
          resolved: null,
        },
      ],
      set: Map {
        "arguments" => Variable$28,
        "a" => Variable$29,
      },
      type: "function",
      upper: ClassScope$13,
      variables: Array [
        Variable$28,
        Variable$29,
      ],
    },
    FunctionScope$16 {
      block: FunctionExpression$18,
      isStrict: true,
      references: Array [],
      set: Map {
        "arguments" => Variable$30,
      },
      type: "function",
      upper: ClassScope$13,
      variables: Array [
        Variable$30,
      ],
    },
  ],
}
`;
